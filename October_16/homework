Рекурсия:
1 Функция CalcSumNumbers(). Вычислить сумму элементов набора чисел
L = [ 2, 3, 8, 11, 4, 6 ]

2 Функция CalcSumNegativeNumbers(). Вычислить количество отрицательных чисел в наборе
L = [ -2, 3, 8, -11, -4, 6 ]

3 Функция GetFibonacciList(). Возврат ряда Фибоначчи

4 Функция GetMaxList(). Определение максимального элемента списка
L = [ 500, 2300, 800, 114, 36]

Списки и сортировка:

1 Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов одного знака нет - не выводите ничего. Если таких пар соседей несколько - выведите первую пару.
1 2 -3 -4 -5
1 2

2 Выведите значение наименьшего из всех положительных элементов в списке. Известно, что в списке есть хотя бы один положительный элемент, а значения всех элементов списка по модулю не превосходят 1000.
5 -4 3 -2 1
1

3 Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
1 2 2 3 3 3
3

4 Циклически сдвиньте элементы списка вправо (A[0] переходит на место A[1], A[1] на место A[2], ..., последний элемент переходит на место A[0]). Используйте минимально возможное количество операций присваивания.
1 2 3 4 5
5 1 2 3 4 

5 Дан список. Выведите те его элементы, которые встречаются в списке только один раз. Элементы нужно выводить в том порядке, в котором они встречаются в списке.
4 3 5 2 5 1 3 5
4 2 1 

6 Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.

1 8
2 7
3 6
4 5
5 4
6 3
7 2
8 1

YES

7 Дан список целых чисел. Требуется “сжать” его, переместив все ненулевые элементы в левую часть списка, не меняя их порядок, а все нули - в правую часть. Порядок ненулевых элементов изменять нельзя, дополнительный список использовать нельзя, задачу нужно выполнить за один проход по списку. Распечатайте полученный список.
4 0 5 0 3 0 0 5
4 5 3 5 0 0 0 0 

8
Системный администратор вспомнил, что давно не делал архива пользовательских файлов.Однако, объем диска, куда он может поместить архив, может быть меньше чем суммарный объем архивируемых файлов.
Известно, какой объем занимают файлы каждого пользователя.
Напишите программу, которая по заданной информации о пользователях и свободному объему на архивном диске определит максимальное число пользователей, чьи данные можно поместить в архив, при этом используя свободное место как можно более полно.
Программа получает на вход в одной строке число S – размер свободного места на диске (натуральное, не превышает 10000), и число N – количество пользователей (натуральное, не превышает 100), после этого идет N чисел - объем данных каждого пользователя (натуральное, не превышает 1000), записанных каждое в отдельной строке.
Выведите наибольшее количество пользователей, чьи данные могут быть помешены в архив.
100 2
200
50

1

100 3
50
30
50

2





